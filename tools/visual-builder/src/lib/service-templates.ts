import { ServiceTemplate } from "../types";

export const serviceTemplates: ServiceTemplate[] = [
  {
    id: "nginx",
    type: "web",
    name: "Nginx",
    icon: "üåê",
    description: "High performance web server and reverse proxy",
    image: "nginx:latest",
    ports: ["80:80", "443:443"],
    environment: [],
    volumes: ["./nginx.conf:/etc/nginx/nginx.conf"],
    category: "web",
    tags: ["web", "proxy", "load-balancer"],
  },
  {
    id: "postgres",
    type: "database",
    name: "PostgreSQL",
    icon: "üêò",
    description: "Powerful, open source object-relational database system",
    image: "postgres:15",
    ports: ["5432:5432"],
    environment: [
      "POSTGRES_DB=mydb",
      "POSTGRES_USER=user",
      "POSTGRES_PASSWORD=password",
    ],
    volumes: ["postgres_data:/var/lib/postgresql/data"],
    category: "database",
    tags: ["database", "sql", "persistent"],
  },
  {
    id: "redis",
    type: "cache",
    name: "Redis",
    icon: "üî¥",
    description:
      "In-memory data structure store, used as database, cache and message broker",
    image: "redis:7-alpine",
    ports: ["6379:6379"],
    environment: [],
    volumes: ["redis_data:/data"],
    category: "cache",
    tags: ["cache", "key-value", "memory"],
  },
  {
    id: "nodejs",
    type: "application",
    name: "Node.js API",
    icon: "üì¶",
    description: "JavaScript runtime built on Chrome's V8 JavaScript engine",
    image: "node:18-alpine",
    ports: ["3000:3000"],
    environment: ["NODE_ENV=production", "PORT=3000"],
    volumes: ["./app:/usr/src/app", "/usr/src/app/node_modules"],
    category: "backend",
    tags: ["javascript", "api", "backend"],
  },
  {
    id: "mongodb",
    type: "database",
    name: "MongoDB",
    icon: "üçÉ",
    description: "Document-oriented NoSQL database",
    image: "mongo:6",
    ports: ["27017:27017"],
    environment: [
      "MONGO_INITDB_ROOT_USERNAME=admin",
      "MONGO_INITDB_ROOT_PASSWORD=password",
    ],
    volumes: ["mongo_data:/data/db"],
    category: "database",
    tags: ["nosql", "document", "database"],
  },
  {
    id: "mysql",
    type: "database",
    name: "MySQL",
    icon: "üê¨",
    description: "Popular open source relational database",
    image: "mysql:8",
    ports: ["3306:3306"],
    environment: [
      "MYSQL_ROOT_PASSWORD=rootpassword",
      "MYSQL_DATABASE=mydb",
      "MYSQL_USER=user",
      "MYSQL_PASSWORD=password",
    ],
    volumes: ["mysql_data:/var/lib/mysql"],
    category: "database",
    tags: ["sql", "relational", "database"],
  },
  {
    id: "react",
    type: "frontend",
    name: "React App",
    icon: "‚öõÔ∏è",
    description: "Modern React application with hot reload",
    image: "node:18-alpine",
    ports: ["3001:3000"],
    environment: ["REACT_APP_API_URL=http://localhost:3000"],
    volumes: ["./frontend:/app", "/app/node_modules"],
    category: "frontend",
    tags: ["react", "frontend", "spa"],
  },
  {
    id: "python",
    type: "application",
    name: "Python API",
    icon: "üêç",
    description: "Python Flask/FastAPI application",
    image: "python:3.11-slim",
    ports: ["5000:5000"],
    environment: ["FLASK_ENV=production", "PYTHONUNBUFFERED=1"],
    volumes: ["./api:/app"],
    category: "backend",
    tags: ["python", "api", "backend"],
  },
  {
    id: "elasticsearch",
    type: "search",
    name: "Elasticsearch",
    icon: "üîç",
    description: "Distributed, RESTful search and analytics engine",
    image: "elasticsearch:8.9",
    ports: ["9200:9200", "9300:9300"],
    environment: ["discovery.type=single-node", "xpack.security.enabled=false"],
    volumes: ["es_data:/usr/share/elasticsearch/data"],
    category: "search",
    tags: ["search", "analytics", "lucene"],
  },
  {
    id: "kibana",
    type: "monitoring",
    name: "Kibana",
    icon: "üìä",
    description: "Data visualization dashboard for Elasticsearch",
    image: "kibana:8.9",
    ports: ["5601:5601"],
    environment: ["ELASTICSEARCH_HOSTS=http://elasticsearch:9200"],
    volumes: [],
    category: "monitoring",
    tags: ["visualization", "dashboard", "elastic"],
  },
  {
    id: "rabbitmq",
    type: "message-broker",
    name: "RabbitMQ",
    icon: "üêá",
    description: "Message broker that implements AMQP protocol",
    image: "rabbitmq:3-management",
    ports: ["5672:5672", "15672:15672"],
    environment: [
      "RABBITMQ_DEFAULT_USER=admin",
      "RABBITMQ_DEFAULT_PASS=password",
    ],
    volumes: ["rabbitmq_data:/var/lib/rabbitmq"],
    category: "messaging",
    tags: ["message-broker", "amqp", "queue"],
  },
  {
    id: "traefik",
    type: "proxy",
    name: "Traefik",
    icon: "üö¶",
    description: "Modern reverse proxy and load balancer",
    image: "traefik:latest",
    ports: ["80:80", "443:443", "8080:8080"],
    environment: [],
    volumes: [
      "/var/run/docker.sock:/var/run/docker.sock",
      "./traefik.yml:/etc/traefik/traefik.yml",
    ],
    category: "infrastructure",
    tags: ["reverse-proxy", "load-balancer", "edge-router"],
  },
  {
    id: "portainer",
    type: "management",
    name: "Portainer",
    icon: "‚öì",
    description: "Container management UI for Docker",
    image: "portainer/portainer-ce:latest",
    ports: ["9000:9000", "8000:8000"],
    environment: [],
    volumes: [
      "/var/run/docker.sock:/var/run/docker.sock",
      "portainer_data:/data",
    ],
    category: "management",
    tags: ["management", "ui", "admin"],
  },
  {
    id: "grafana",
    type: "monitoring",
    name: "Grafana",
    icon: "üìà",
    description: "Metrics dashboard and graph editor",
    image: "grafana/grafana:latest",
    ports: ["3000:3000"],
    environment: ["GF_SECURITY_ADMIN_PASSWORD=admin"],
    volumes: ["grafana_data:/var/lib/grafana"],
    category: "monitoring",
    tags: ["metrics", "dashboard", "visualization"],
  },
  {
    id: "prometheus",
    type: "monitoring",
    name: "Prometheus",
    icon: "üìâ",
    description: "Systems monitoring and alerting toolkit",
    image: "prom/prometheus:latest",
    ports: ["9090:9090"],
    environment: [],
    volumes: [
      "./prometheus.yml:/etc/prometheus/prometheus.yml",
      "prometheus_data:/prometheus",
    ],
    category: "monitoring",
    tags: ["metrics", "monitoring", "alerting"],
  },
  {
    id: "jenkins",
    type: "ci-cd",
    name: "Jenkins",
    icon: "üîß",
    description: "Open source automation server for CI/CD",
    image: "jenkins/jenkins:lts",
    ports: ["8080:8080", "50000:50000"],
    environment: [],
    volumes: [
      "jenkins_data:/var/jenkins_home",
      "/var/run/docker.sock:/var/run/docker.sock",
    ],
    category: "ci-cd",
    tags: ["ci", "cd", "automation"],
  },
];
